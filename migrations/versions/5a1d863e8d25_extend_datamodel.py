"""extend datamodel

Revision ID: 5a1d863e8d25
Revises: 5cb7d4e9230c
Create Date: 2019-10-06 12:56:38.347941

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
import click
from sqlalchemy import orm

from project.server.models import Question, Unit
from project.server.models.datasources import DataSource

revision = '5a1d863e8d25'
down_revision = '5cb7d4e9230c'
branch_labels = None
depends_on = None


def upgrade():

    op.alter_column('questions', 'source', new_column_name='reference')

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('datasources',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('units',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('question_category_assignments',
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], )
    )

    op.add_column('questions', sa.Column('source_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'questions', 'datasources', ['source_id'], ['id'])

    op.add_column('questions', sa.Column('unit_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'questions', 'units', ['unit_id'], ['id'])

    bind = op.get_bind()
    session = orm.Session(bind=bind)

    # create a source
    user_created_source = DataSource(name="User created")
    session.add(user_created_source)

    # create teams for each team name
    units = {r["unit"]: Unit(name=r["unit"]) for r in bind.execute("SELECT distinct unit from public.questions")}
    qs = {r["id"]: units[r["unit"]] for r in bind.execute("SELECT id, unit from public.questions")}
    session.add_all(units.values())

    session.commit()

    # update the question's unit to the correct entity
    for question in session.query(Question):
        question.unit_id = qs[question.id].id
        question.source_id = user_created_source.id

    session.commit()
    op.drop_column('questions', 'unit')

    op.alter_column('questions', 'source_id', nullable=False)
    op.alter_column('questions', 'unit_id', nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('questions', sa.Column('unit', sa.VARCHAR(),
                                         server_default=sa.text("'number'::character varying"),
                                         autoincrement=False, nullable=False))

    bind = op.get_bind()
    units = {r["id"]: r["name"] for r in bind.execute("SELECT id, name from public.units")}

    for id, name in units.items():
        bind.execute("UPDATE public.questions SET unit='{}' WHERE unit_id={}".format(name, id))

    op.drop_column('questions', 'unit_id')
    op.drop_column('questions', 'source_id')
    op.drop_table('question_category_assignments')
    op.drop_table('units')
    op.drop_table('datasources')
    op.drop_table('categories')

    op.alter_column('questions', 'reference', new_column_name='source')

    # ### end Alembic commands ###
